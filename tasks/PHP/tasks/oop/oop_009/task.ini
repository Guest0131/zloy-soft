[Info]

Variant=0

Text="<p>Написать класс Polynomial, который представляет собой многочлен над полем указанной характеристики. Класс должен содержать:
<ul>
  <li>Конструктор __construct($coeff, $charField);</li>
  <li>Метод set_coeff($coeff);</li>
  <li>Метод set_charField($charField);</li>
  <li>Метод string_to_arr(), разбивает строку с коэффициентами в массив;</li>
  <li>Метод get_coeff();</li>
  <li>Метод get_charField();</li>
  <li>Метод redution(), приводящий коэффициенты по модулю;</li>
  <li>Метод add($parameters_other), рассчитывающий сумму двух полиномов. Результат сохраняется в объект вызываемого метода;</li>
  <li>Метод composition($parameters_other), рассчитывающий проивзедение двух многочленов. Результат сохраняется в объект вызываемого метода;</li>
  <li>Метод is_mirror_polynimial(), проверяет является ли данный многочлен зеркальным(т.е коэффициенты зеркальных номеров совпадают). Возвращает строку \"true\" или \"false\";</li>
  <li>Свойство(private) $__coeff строка коэффициентов, первый коэффициент - свободный член.</li>
  <li>Свойство(private) $__charField, характеристика поля</li>
</ul>
К свойствам можно обращаться только через методы. Все методы public.</p>"

Difficulty=3

Topic="Задачи на ООП"
TopicId=272

Author="zexel"
Solver="PHP"

[Solution]
ExemplaryQuery='class Polynom {
	private $__coeff = "", $__charField = 0;
	
	public function __construct($coeff, $charField) {
		$this->__coeff = $coeff;
		$this->__charField = $charField; 
	}
	
	public function set_coeff($coeffArr) {
		$this->__coeff = implode(" ", $coeffArr);
	}
	
	public function set_charField($charField) {
		$this->__charField = $charField;
	}
	
	public function string_to_arr() {
		return explode(" ", $this->__coeff);
	}
	
	public function get_coeff() {
		$this->redution();
		return $this->__coeff;
	}
	
	public function get_charField() {
		return $this->__charField;
	}
	
	public function redution() {
		$coeffArr = $this->string_to_arr();
		if($this->__charField != 0) {
			foreach ($coeffArr as &$coeff) {
				if($coeff < 0) 
					$coeff += $this->__charField;

$coeff %= $this->__charField;
			}

unset($coeff);
		}
		
		$this->set_coeff($coeffArr);
	}
	
	public function add($other_parameters) {
		$other = new Polynom($other_parameters[0], $other_parameters[1]);
		if($other_parameters[1] !== $this->__charField)
			return "Поля разных характеристик.";
		
		$coeffArr = $this->string_to_arr();
		$coeffOtherArr = $other->string_to_arr();
		$newCoeff = array();
		
		for($i = 0; $i < max(count($coeffArr), count($coeffOtherArr)); ++$i) {
			$newCoeff[$i] = isset($coeffArr[$i]) !== false ? $coeffArr[$i] : 0;
			$newCoeff[$i] += isset($coeffOtherArr[$i]) !== false ? $coeffOtherArr[$i] : 0;
		}
		
		$this->set_coeff($newCoeff);
		$this->redution();
	}
	
	public function composition($other_parameters) {
		$other = new Polynom($other_parameters[0], $other_parameters[1]);
		if($other_parameters[1] !== $this->__charField)
			return "Поля разных характеристик.";
		
		$coeffArr = $this->string_to_arr();
		$coeffOtherArr = $other->string_to_arr();
		
		$newCoeff = array();
		
		foreach($coeffArr as $numberLeft => $coeffLeft) {
			foreach ($coeffOtherArr as $numberRight => $coeffRight) {
				$newCoeff[$numberLeft + $numberRight] = isset($newCoeff[$numberLeft + $numberRight]) !== false 
					? $newCoeff[$numberLeft + $numberRight] + $coeffLeft * $coeffRight : $coeffLeft * $coeffRight;
			}
		}
		
		$this->set_coeff($newCoeff);
	}
	
	public function is_mirror_polynimial() {
		$this->redution();
		
		$coeffArr = $this->string_to_arr();
		
		$first_part = array();
		$second_part = array();
		
		$count = count($coeffArr) % 2 == 0 
			? count($coeffArr) / 2
			: (count($coeffArr) - 1) / 2;

for($i = 0; $i < $count; ++$i) {
			$first_part[] = $coeffArr[$i];
			$second_part[] = $coeffArr[count($coeffArr) - 1 -  $i];
		}

return $first_part == $second_part ? "true" : "false";
	}
}'

