[Info]

Variant=0

Text="<p>Написать класс Complex, который представляет собой комплексное число
Класс должен содержать:
<ul>
  <li>Конструктор __construct($__real, $__imaginary);</li>
  <li>Метод set_real($__real);</li>
  <li>Метод set_imaginary($imaginary);</li>
  <li>Метод get_real();</li>
  <li>Метод get_imaginary();</li>
  <li>Метод module(), рассчитывающий модуль комплексного числа;</li>
  <li>Метод get_arg(), рассчитывающий аргумент комплексного числа;</li>
  <li>Метод set_coordinates($module, $arg), устанавливающий свойства в соответствии с заданными параметрами;</li>
  <li>Метод pow_complex($degree), возводящий комплексное число в степень $degree;</li>
  <li>Метод add($parameters_other), рассчитывающий сумму двух комплексных чисел.;</li>
  <li>Метод composition($parameters_other), рассчитывающий проивзедение двух комплексных чисел.;</li>
  <li>Метод reverse_element(), рассчитывающий обратный в поле комплексных чисел. Вернуть сериализованную строку.</li>
  <li>Метод division($parameters_other), рассчитывающий деление в поле комплексных чисел.;</li>
  <li>Свойство(private) $__real</li>
  <li>Свойство(private) $__imaginary</li>
</ul>
Важно! $parameters_other - массив параметров объека с которым складываем или находим произведение: соответственно в [0] лежит real, в [1] лежит imaginary!
К свойствам можно обращаться только через методы. Все методы public</p>
<p>Отнаследовать от класса Complex класс Real, необходимо:
<ul>
	<li>Переопределить конструктор(мнимая составляющая всегда 0);</li>
    <li>Переопределить матод сложения действительных чисел add($other), теперь представление не в виде упорядоченной пары, а в виде чисел;</li>
    <li>Переопределить матод умножения действительных чисел composition($other), теперь представление не в виде упорядоченной пары, а в виде чисел;</li></p>"

Difficulty=4

Topic="Задачи на ООП"
TopicId=272

Author="zexel"
Solver="PHP"

[Solution]
ExemplaryQuery='class Complex
{
	private $__real = 0, $__imaginary = 0;

public function __construct($real, $imaginary) {
		$this->__real = $real;
		$this->__imaginary = $imaginary;
	}
	
	public function set_real($real) {
		$this->__real = $real;
	}
	
	public function set_imaginary($imaginary) {
		$this->__imaginary = $imaginary;
	}
	
	public function get_real() {
		return $this->__real;
	}
	
	public function get_imaginary() {
		return $this->__imaginary;
	}
	
	public function module() {
		return sqrt($this->__real * $this->__real + $this->__imaginary * $this->__imaginary);
	}
	
	public function get_arg() {
		return cosh($this->__real / $this->module());
	}
	
	public function set_coordinates($module, $arg) {
		$this->__real = $module * cos($arg);
		$this->__imaginary = $module * sin($arg);
	}
	
	public function pow_complex($degree) {
		$this->set_coordinates(pow($this->module(), $degree), $this->get_arg() * $degree);
	}
	
	public function add($parameters_other) {
        $right = new Complex($parameters_other[0], $parameters_other[1]);
		$this->set_real($this->get_real() + $right->get_real());
		$this->set_imaginary($this->get_imaginary() + $right->get_imaginary());
	}
	
	public function composition($parameters_other) {
        $right = new Complex($parameters_other[0], $parameters_other[1]);
		$this->set_real($this->get_real() * $right->get_real() - $this->get_imaginary() * $right->get_imaginary());
		$this->set_imaginary($this->get_real() * $right->get_imaginary() + $this->get_imaginary() * $right->get_real());
	}
    
    public function reverse_element() {
		$reverse_element = new Complex($this->get_real() / ($this->module() * $this->module()), 
			$this->get_imaginary() / ($this->module() * $this->module()));
		return serialize($reverse_element);
	}
    
    public function division($parameters_other) {
		$right = new Complex($parameters_other[0], $parameters_other[1]);
		$reverse_right = unserialize($right->reverse_element());
		
		$this->composition([$reverse_right->get_real(), $reverse_right->get_imaginary()]);
	}
}

class Real extends Complex {
	
	public function __construct($real) {
		parent::__construct($real, 0);
	}
	
	public function add($other) {
		return parent::add([$other, 0]);
	}
	
	public function composition($other) {
		return parent::composition([$other, 0]);
	}
}'
	
	

