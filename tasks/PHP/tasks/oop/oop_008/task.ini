[Info]

Variant=0

Text="<p>Написать класс Fraction, который представляет собой дробное число
Класс должен содержать:
<ul>
  <li>Конструктор __construct($numerator, $denomerator);</li>
  <li>Метод set_numerator($numerator);</li>
  <li>Метод set_denomerator($denomerator);</li>
  <li>Метод get_numerator();</li>
  <li>Метод get_denomerator();</li>
  <li>Метод redution(), сокращающий дробь;</li>
  <li>Метод add($parameters_other), рассчитывающий сумму двух дробей, возвращается сокращенный вариант. Результат сохраняется в объект вызываемого метода;</li>
  <li>Метод composition($parameters_other), рассчитывающий проивзедение двух двух дробей, возвращается сокращенный вариант. Результат сохраняется в объект вызываемого метода;</li>
  <li>Свойство(private) $__numerator</li>
  <li>Свойство(private) $__denomerator</li>
</ul>
К свойствам можно обращаться только через методы. Все методы public. Если знаменатель равен 0, то вернуть предупреждение 'На ноль делить нельзя!'</p>
<p>Отнаследовать от класса Complex класс Whole, необходимо:
<ul>
	<li>Переопределить конструктор(мнимая составляющая всегда 1);</li>
    <li>Переопределить матод сложения действительных чисел add($other), теперь представление не в виде упорядоченной пары(числитель, знаменатель), а в виде чисел;</li>
    <li>Переопределить матод умножения действительных чисел composition($other), теперь представление не в виде упорядоченной пары, а в виде чисел;</li></p>"

Difficulty=3

Topic="Задачи на ООП"
TopicId=272

Author="zexel"
Solver="PHP"

[Solution]
ExemplaryQuery='class Fraction
		{
			private $__numerator, $__denomerator;

public function __construct($numerator, $denomerator) {
            	if($denomerator === 0)
					return "На ноль делить нельзя!";
            
				$this->__numerator = $numerator;
				$this->__denomerator = $denomerator;
			}

public function set_numerator($numerator) {
				$this->__numerator = $numerator;
			}

public function set_denomerator($denomerator) {
				$this->__denomerator = $denomerator;
			}

public function get_numerator() {
				return $this->__numerator;
			}

public function get_denomerator() {
				return $this->__denomerator;
			}

public function redution() {
		$numerator = $this->__numerator;
		$denomerator = $this->__denomerator;
		for($i = 2; $i < min($numerator, $denomerator) + 1; ++$i) {
			if($this->__numerator % $i === 0 && $this->__denomerator % $i === 0) {
				while($this->__numerator % $i === 0 && $this->__denomerator % $i === 0) {
					$this->__numerator /= $i;
					$this->__denomerator /= $i;
				}
			}
		}
	}

public function add($parameters_other) {
				$right = new Fraction($parameters_other[0], $parameters_other[1]);

$this->redution();
				$right->redution();

if($this->get_denomerator() !== $right->get_denomerator()) {
					$this->set_numerator($this->__numerator * $right->__denomerator + $this->__denomerator * $right->__numerator);
					$this->set_denomerator($this->__denomerator * $right->__denomerator);
				}

else
					$this->set_numerator($this->__numerator + $right->__numerator);

$this->redution();

//return serialize($this);
			}

public function composition($parameters_other) {
				$right = new Fraction($parameters_other[0], $parameters_other[1]);

$this->set_numerator($this->get_numerator() * $right->get_numerator());
				$this->set_denomerator($this->get_denomerator() * $right->get_denomerator());

$this->redution();

//return serialize($this);
			}
		}

class Whole extends Fraction {
			public function __construct($numerator) {
				parent::__construct($numerator, 1);
			}

public function add($other) {
				parent::add([$other, 1]);
			}

public function composition($other) {
				parent::composition([$other, 1]);
			}
		}'
		
		



[DataBase]
TaskId=2461
GroupTaskId=1604
