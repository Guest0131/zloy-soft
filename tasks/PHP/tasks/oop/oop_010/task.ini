[Info]

Variant=0

Text="<p>Написать класс HardWorker, который представляет собой работника. Класс должен содержать:
<ul>
  <li>Конструктор __construct($age, $salary, $jobs);</li>
  <li>Метод set_age($age);</li>
  <li>Метод set_salary($salary);</li>
  <li>Метод set_jobs($jobs);</li>
  <li>Метод get_age();</li>
  <li>Метод get_salary();</li>
  <li>Метод get_jobs();</li>
  <li>Метод funny(), который вычитает из денежных средств 10000;</li>
  <li>Свойство(private) $__age, возраст.;</li>
  <li>Свойство(private) $__salary, количество денежных средств.;</li>
  <li>Свойство(private) $__jobs, количество заказов.;</li>
</ul>
К свойствам можно обращаться только через методы. Все методы public.</p>
<p>С помощью включений реализовать классы: Plumber и Programmer.
Класс Plumber должен содержать:
<ul>
  <li>Конструктор __construct($age, $salary, $jobs);</li>
  <li>Метод worked(), увеличивает количество заказов на 5, денежные средства на 1000, а возраст на полгода.;</li>
  <li>Метод ate(), уменьшает количество заказов на 2, денежные средства на 500;</li>
  <li>Метод sleep(), уменьшает количество заказов на 5.</li>
  <li>Свойство(private) $__plumber.</li>
</ul>
Класс Programmer должен содержать:
<ul>
  <li>Конструктор __construct($age, $salary, $jobs);</li>
  <li>Метод worked(), увеличивает количество заказов на 1000000, денежные средства на 10000, а возраст на 10 лет.;</li>
  <li>Метод ate(), уменьшает количество заказов на 1, денежные средства на 700;</li>
  <li>Метод sleep(), уменьшает количество заказов на 1.;</li>
  <li>Свойство(private) $__programmer.;</li>
</ul>
При включении классов, сохранить все исходные методы в целевых классах.
</p>"

Difficulty=2

Topic="Задачи на ООП"
TopicId=272

Author="zexel"
Solver="PHP"

[Solution]
ExemplaryQuery='class HardWorker
{
	private $__age = 0, $__salary = 0, $__jobs = 0;

public function __construct($age, $salary, $jobs) {
		$this->__age = $age;
		$this->__jobs = $jobs;
		$this->__salary = $salary;
	}
	
	public function set_age($age) {
		$this->__age = $age;
	}

public function set_salary($salary) {
		$this->__salary = $salary;
	}

public function set_jobs($jobs) {
		$this->__jobs = $jobs;
	}
	
	public function get_age() {
		return $this->__age;
	}

public function get_salary() {
		return $this->__salary;
	}

public function get_jobs() {
		return $this->__jobs;
	}
	
	public function funny() {
		$this->set_salary($this->get_salary() - 10000);
	}
}

class Plumber 
{
	private $__plumber;

public  function __construct($age, $salary, $jobs) {
		$this->__plumber = new HardWorker($age, $salary, $jobs);
	}
	
	public function set_age($age) {
		$this->__plumber->set_age($age);
	}

public function set_salary($salary) {
		$this->__plumber->set_salary($salary);
	}

public function set_jobs($jobs) {
		$this->__plumber->set_jobs($jobs);
	}
	
	public function get_age() {
		return $this->__plumber->get_age();
	}

public function get_salary() {
		return $this->__plumber->get_salary();
	}

public function get_jobs() {
		return $this->__plumber->get_jobs();
	}
	
	public function worked() {
		$this->set_jobs($this->get_jobs() + 5);
		$this->set_salary($this->get_salary() + 1000);
		$this->set_age($this->get_age() + 0.5);
	}
	
	public function ate() {
		$this->set_jobs($this->get_jobs() - 2);
		$this->set_salary($this->get_salary() - 500);
	}
	
	public function sleep() {
		$this->set_jobs($this->get_jobs() - 5);
	}
	
	public function funny() {
		$this->set_salary($this->get_salary() - 10000);
	}
	
}

class  Programmer
{
	private $__programmer;

public  function __construct($age, $salary, $jobs) {
		$this->__programmer = new HardWorker($age, $salary, $jobs);
	}
	
	public function set_age($age) {
		$this->__programmer->set_age($age);
	}

public function set_salary($salary) {
		$this->__programmer->set_salary($salary);
	}

public function set_jobs($jobs) {
		$this->__programmer->set_jobs($jobs);
	}
	
	public function get_age() {
		return $this->__programmer->get_age();
	}

public function get_salary() {
		return $this->__programmer->get_salary();
	}

public function get_jobs() {
		return $this->__programmer->get_jobs();
	}
	
	public function worked() {
		$this->set_jobs($this->get_jobs() + 1000000);
		$this->set_salary($this->get_salary() + 10000);
		$this->set_age($this->get_age() + 10);
	}
	
	public function ate() {
		$this->set_jobs($this->get_jobs() - 1);
		$this->set_salary($this->get_salary() - 700);
	}
	
	public function sleep() {
		$this->set_jobs($this->get_jobs() - 1);
	}
	
	public function funny() {
		$this->set_salary($this->get_salary() - 10000);
	}
}'

